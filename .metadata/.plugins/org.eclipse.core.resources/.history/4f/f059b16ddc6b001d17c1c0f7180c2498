package pages;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import dao.CandidateDaoImpl;
import dao.UserDaoImpl;
import pojos.User;

import static utils.DBUtils.*;

/**
 * Servlet implementation class LoginServlet
 */
@WebServlet(value = "/authenticate", loadOnStartup = 1)
// Eager initialization because loadOnStartup
//WC will start the life cycle of this servlet --@ app dep time
//Map : key : /authenticate , value : pages.LoginServlet
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private UserDaoImpl userDao;
	private CandidateDaoImpl candidateDao;
//Overriding form of the method CAN NOT add any NEW or BROADER CHECKED excs

	public void init() throws ServletException/* ,SQLException */ {
		try {
			// open connection
			openConnection();
			// creat dao instance
			userDao = new UserDaoImpl();
			candidateDao = new CandidateDaoImpl();
			System.out.println("init complete for " + getClass());
		} catch (Exception e) {
			// centralized exc handling in servlets : re throw the exception to the caller
			// --> WC --to inform init has failed --> so that it can abort the servlet's
			// life cycle : ServletException(String mesg, Throwable e)
			throw new ServletException("err in init of " + getClass(), e);
//			Rethrow the exception back to the caller 
//			because only allowed to throw servletException
		}
	}

	public void destroy() {
		try {
			userDao.cleanUp();
			candidateDao.cleanUp();
			closeConnection();
		} catch (Exception e) {
			// System.out.println("err in destroy of "+getClass()+" err "+e);
			throw new RuntimeException("err in destroy " + getClass(), e);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 1. set cont type( return Type)
		response.setContentType("text/html");
		// 2. get pw to send text reps to the clnt
		try (PrintWriter pw = response.getWriter()) {
			// 3. read request params
			// API of ServletRequest : String getParamter(String paramName)
			String em = request.getParameter("email");
			String pwd = request.getParameter("pass");
			// 4.invoke dao's method for validation
			User user = userDao.authenticateUser(em, pwd);
			// 5. null chking
			if (user == null) // => invalid login
				pw.print("<h4> Invalid Login , Please <a href='login.html'>Retry</a></h4>");
			else // => valid login --> proceed to role based authorization
			{
				// how to remember the clnt across multiple reqs : HttpSession based
				// 1. get session from WC
				HttpSession session = request.getSession(); 		// Servlet is requesting WC -> to create the cookie  
//				WC call requst.getCookies() -> null or not null
//				null -> New User -> creates new httpSeassion obj created in server side heap. associated it with unique ID
//				Called JSessionID : 
//				Cookie c1 = new Cookie("JSESSIONID","ffsdfhk34jh5k35kjhkjhk");
//				resp.addCookie(c1);
//				IF Not Null -> WC retrieves existing HS object n returns  it to the caller
				
				System.out.println("Session ="+session.getClass()); // Tomcat suppled imple class for httpSession catalina based
				
				System.out.println("From login servlet : is new " + session.isNew()); // true
				
				System.out.println("session id " + session.getId());// uniquq string /clnt generated by WC
				
				// 2. save user details under session scope
				session.setAttribute("user_info", user);		// Attribute Server is entry
				
				// add user dao instance under session scope
				session.setAttribute("user_dao", userDao);
				
				// add canddiate dao instance under session scope
				session.setAttribute("candidate_dao", candidateDao);
				
				if (user.getRole().equals("admin")) // admin login
					// redirect : API of HttpServletResponse : public void sendRedirect(String
					// location) throws IOExc
					response.sendRedirect("admin");// /admin : url-pattern of the Admin Page
				else // voter login
				{
					if (user.isVotingStatus())// alrdy voted !
						response.sendRedirect("logout"); // logout page : url-pattern
					else // voter : not yet voted
						response.sendRedirect("candidate_list");
				}
				// What will WC do when : resp.sendRedirect(location)	// client pull 2
				// WC discard resp buffer(pw's buffer) --> sends temp redirect resp --> clnt
				// Response packet : SC 302 | Location : admin + Set-Cookie : JSESSIONID:		// Key is given to client
				// abcdfagdfag765746876
				// | Body : EMPTY
				// Clnt browser sends NEXT request , URL : http://host:port/day3.1/admin ,
				// method : GET +JSESSIONID: abcdfagdfag765746876
				// req header : cookie :
				// WC --> doGet ---> continue....

			}
		} catch (Exception e) {
			throw new ServletException("err in do-post of " + getClass(), e);
		}
	}

}
